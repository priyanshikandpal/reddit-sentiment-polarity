from flask import Flask, render_template, request, redirect, url_for, send_file
from main import searchCommentsAndAnalyze
from auth import authenticate
from graphics import warmthGraphic, wordCloudGraphic
import pandas as pd
import io
import datetime

app = Flask(__name__)
reddit = authenticate()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/results', methods=['POST'])
def results():
    topic = request.form['topic']
    key_words = request.form['key_words']
    model = request.form.get('model', 'textblob')  # New model selection parameter
    
    # Updated function call with model parameter
    sentiments, texts,vader_scores = searchCommentsAndAnalyze(reddit, topic, model)
    
    # Generate the heatmap with actual keyword frequencies
    keywords = key_words.split(',')  # Assuming key_words are comma-separated
    warmthGraphic(keywords, texts)
    
    # Generate the word cloud
    wordCloudGraphic(texts)

    # Calculate summary statistics
    total_comments = len(sentiments)
    avg_sentiment = round(sum(sentiments) / total_comments, 2) if total_comments > 0 else 0
    positive_count = len([s for s in sentiments if s > 0])
    negative_count = len([s for s in sentiments if s < 0])
    neutral_count = len([s for s in sentiments if s == 0])

    # Store data for CSV download
    app.config['ANALYSIS_DATA'] = {
        'topic': topic,
        'sentiments': sentiments,
        'texts': texts
    }

    # Get sample comments by sentiment
    sample_comments = {
        'positive': [],
        'negative': [],
        'neutral': []
    }
    
    for sentiment, text in zip(sentiments, texts):
        if sentiment > 0 and len(sample_comments['positive']) < 3:
            sample_comments['positive'].append(text)
        elif sentiment < 0 and len(sample_comments['negative']) < 3:
            sample_comments['negative'].append(text)
        elif sentiment == 0 and len(sample_comments['neutral']) < 3:
            sample_comments['neutral'].append(text)

    # Find most common keywords
    word_freq = {}
    for text in texts:
        for word in text.lower().split():
            if len(word) > 3 and word not in ['this', 'that', 'with', 'from', 'what', 'the', 'and', 'for']:
                word_freq[word] = word_freq.get(word, 0) + 1

    # Get top 5 keywords
    top_keywords = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:5]

    return render_template(
        'results.html',
        sentiments=sentiments,
        texts=texts,
        zip=zip,
        topic=topic,
        key_words=key_words,
        total_comments=total_comments,
        avg_sentiment=avg_sentiment,
        positive_count=positive_count,
        negative_count=negative_count,
        neutral_count=neutral_count,
        sample_comments=sample_comments,
        top_keywords=top_keywords,
        vader_scores=vader_scores if model == 'vader' else None,
        model=model.upper(),  # Pass model to template
        heatmap_path='static/graphs/warmth_graphic.png',
        bar_graph_path='static/graphs/bar_graphic.png',
        dispersion_graph_path='static/graphs/dispersion_graphic.png',
        pizza_graph_path='static/graphs/pizza_graphic.png',
        histogram_path='static/graphs/histogram.png',
        line_graph_path='static/graphs/line_graphic.png',
        word_cloud_path='static/graphs/word_cloud.png'
    )

@app.route('/download_csv')
def download_csv():
    """Allow users to download the raw data as CSV"""
    analysis_data = app.config.get('ANALYSIS_DATA', {})
    if not analysis_data:
        return "No data available for download", 404

    # Create a DataFrame with the data
    df = pd.DataFrame({
        'Text': analysis_data['texts'],
        'Sentiment': analysis_data['sentiments'],
        'Category': ['Positive' if s > 0 else ('Negative' if s < 0 else 'Neutral') 
                     for s in analysis_data['sentiments']]
    })

    # Create a buffer for the CSV file
    str_io = io.StringIO()
    df.to_csv(str_io, index=False)

    # Convert to BytesIO
    mem = io.BytesIO()
    mem.write(str_io.getvalue().encode('utf-8'))
    mem.seek(0)
    str_io.close()

    # Generate filename with topic and date
    filename = f"reddit_sentiment_{analysis_data['topic']}_{datetime.datetime.now().strftime('%Y%m%d')}.csv"
    
    return send_file(
        mem,
        mimetype='text/csv',
        as_attachment=True,
        download_name=filename
    )

@app.route('/download_pdf')
def download_pdf():
    """Download the PDF report generated by graphics.py"""
    return send_file(
        'static/graphs/sentiment_analysis.pdf',
        mimetype='application/pdf',
        as_attachment=True,
        download_name='reddit_sentiment_analysis.pdf'
    )

if __name__ == '__main__':
    app.run(debug=True)
